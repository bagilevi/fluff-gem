#!/usr/bin/env ruby
require 'pp'
require 'active_support'
require 'active_support/core_ext'

command = (ARGV[0] if ARGV[0] && ARGV[0].start_with?('--'))

RUNNERS = ENV.fetch('FLUFF_PARALLELISM', 2).to_i
DB_URL_TEMPLATE = ENV.fetch('FLUFF_DB_URL_TEMPLATE')

case command
when '--setup'
  puts "Preparing #{RUNNERS} DBs..."

  (1 .. RUNNERS).map do |runner_num|
    puts "Preparing DB #{runner_num}..."
    db_url = DB_URL_TEMPLATE.gsub('%{index}', runner_num.to_s)

    system("env DISABLE_SPRING=1 RAILS_ENV=test TEST_DATABASE_URL=#{db_url} bundle exec rails db:test:prepare")
  end

else
  require 'securerandom'
  require 'json'
  redis =
    if (redis_url = ENV['FLUFF_REDIS_URL']).present?
      require 'redis'
      Redis.new(url: redis_url)
    end
  run_uuid = SecureRandom.uuid

  paths = ARGV.reject { |a| a.start_with?('-') }
  paths = ['spec'] if paths.empty?

  spec_files = `find #{paths.join(' ')} | grep _spec.rb`.strip.split("\n")

  groups = spec_files.to_enum.with_index.group_by { |s, index| index % RUNNERS }.map { |_, list| list.map { |s, _| s }}

  redis.publish "fluff_shouts", JSON.generate(type: 'start_run', run_uuid: run_uuid) if redis

  puts "[#{Time.current.to_s}]"
  puts "Starting #{groups.size} runners..."

  threads = (1 .. groups.size).map do |runner_num|
    Thread.new(runner_num) do |runner_num|
      spec_files = groups[runner_num - 1]
      db_url = DB_URL_TEMPLATE.gsub('%{index}', runner_num.to_s)
      cmd = "env "
      cmd << "FLUFF_REDIS_URL=#{ENV.fetch('FLUFF_REDIS_URL')} " if redis
      cmd << "FLUFF_RUN_UUID=#{run_uuid} "
      cmd << "DISABLE_SPRING=1 "
      cmd << "RAILS_ENV=test "
      cmd << "TEST_DATABASE_URL=#{db_url} "
      cmd << "bundle exec rspec "
      cmd << "--format progress " if !redis
      cmd << "--format Fluff::Rspec::Formatter " if redis
      cmd << "#{spec_files.join(' ')}"

      require 'open3'
      Open3.popen3(cmd) do |stdin, stdout, stderr, thread|
        puts "One thread finished with exit status #{thread.value.exitstatus}"
        thread.value.exitstatus
      end
    end
  end

  exit_codes = threads.map { |thr| thr.value }
  puts "All threads finished."

  redis.publish "fluff_shouts", JSON.generate(type: 'end_run', run_uuid: run_uuid) if redis

  puts "[#{Time.current.to_s}]"
  if exit_codes.any? { |c| c != 0 }
    puts "\e[31m\nTest suite FAILED.\e[0m"
    puts
    exit(1)
  else
    puts "\e[32m\nTest suite PASSED.\e[0m"
  end
end

puts
